---

- stream:
    name: openstack
    module: rallyci.streams.gerrit
    ssh:
      username: ci50
      hostname: review.openstack.org
      key: /home/eye/.ssh/rally
    vote: false
    silent: true
    comment-header: |
      Build {succeeded} by RallyCI. Use `rally-ci recheck` to recheck
      
      See status at: http://185.8.56.87/
    comment-job-template: "- {name} http://185.8.56.87/{log_path}/ : {success} in {time}"
    recheck-regexp: ^my-ci recheck$
    env:
      GERRIT_PROJECT: change.project
      GERRIT_REF: patchSet.ref
      GERRIT_REFUPD_NEW: refUpdate.newRev
      GERRIT_REFUPD_OLD: refUpdate.oldRev
      GERRIT_REFUPD_NAME: refUpdate.refName
      GERRIT_REFUPD_PROJECT: refUpdate.project

- service:
    name: status
    module: rallyci.services.status
    listen: [127.0.0.1, 8080]

- runner:
    name: main
    provider: ci4950
    module: rallyci.runners.ssh
    key: /home/eye/.ssh/rally
    logs: /store/rally-ci/logs

- provider:
    name: ci4950
    module: rallyci.providers.virsh
    key: /home/eye/.ssh/rally
    hosts:
      - hostname: 10.1.1.1
        port: 16622
        key: /home/eye/.ssh/rally
    storage:
      backend: btrfs
      path: /ci/rally
    metadata_server:
      listen_addr: 127.0.0.1
      listen_port: 8081
      authorized_keys: /etc/rally-ci/authorized_keys
      user_data: |
        #cloud-config
        manage_etc_hosts: true
        bootcmd:
          - echo 'root:r00tme' | chpasswd
        disable_root: 0
        ssh_pwauth: True
        ssh_authorized_keys:
            ssh-rsa ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDlDfJeEk+VbtjZrO61EZNK35c/htfMy6x44R6iPn8uJQwfJ6GaD0Yqnq3i9t4k8I80dASbBTFN/2Ze+xSeBIgSSHXytS1wSe6Npmki8WukWTdhdJiaTpi5DtX/Y9ce62ul87Z9w3ul8eeYeqV3/JFWcb41RxaFjE1K2UvXUzZFZdi+0JuqEVB2OtKzVp8qlowSSQg/lFk8b6XN4EK1Qw72rKJ1cEoolg21rwsfWqPlNZBOt85Wmk77C2W47vxQcUsOE7/yIJH+wclmJLassueipOyAJa0Y60Jejejznh12iFP9VpyG5KKoeCxfeZEPs9evOa5u6CfXTdcnlSfq4eP eye@ci49
    images:
      u1404_bare:
        url: https://cloud-images.ubuntu.com/trusty/current/trusty-server-cloudimg-amd64-disk1.img
      u1404:
        parent: u1404_bare
        build-scripts: ["init_u1404", "clone_projects"]
      u1404_docker:
        parent: u1404
        build-scripts: ["install_docker"]
      u1404_dsvm:
        parent: u1404
        build-scripts: ["install_deps"]
    vms:
      u1404_docker:
        memory: 1024
        image: u1404_docker
        net: ["br5"]
      u1404_dsvm:
        memory: 4096
        image: u1404_dsvm
        net: ["br5"]
      u1404_rally_fuel:
        memory: 1024
        image: u1404
        net: ["br5", "brfuel%"]
      u1404_rally_mos:
        memory: 1024
        image: u1404
        net: ["br5", "brmos%"]
      fuel_community_60:
        memory: 4096
        net: ["brfuel% 52:54:00:c2:56:67"]
      mos_6_1_1:
        memory: 4096
        net: ["brmos% 52:54:00:fa:11:01"]
      mos_6_1_2:
        memory: 4096
        net: ["brmos% 52:54:00:fa:11:02"]
      mos_6_1_3:
        memory: 4096
        net: ["brmos% 52:54:00:fa:11:03"]

- script:
    name: init_u1404
    interpreter: /bin/bash -xe -s
    data: |
      sleep 10
      apt-get update && apt-get --force-yes -y upgrade
      apt-get remove --force-yes -y cloud-init
      apt-get --force-yes -y install git python2.7 python3-dev bash-completion build-essential python-dev libffi-dev libxml2-dev libxslt1-dev libssl-dev libpq-dev libmysqlclient-dev libssl-dev sudo wget libkrb5-dev libsqlite3-dev libldap2-dev libsasl2-dev libvirt-dev sshpass
      echo 'export http_proxy=http://10.1.1.2:3128/' > /etc/profile.d/15-proxy.sh
      . /etc/profile.d/15-proxy.sh
      #
      wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py -O /tmp/gp.py
      python3 /tmp/gp.py
      python /tmp/gp.py &
      #
      useradd -u 65510 -m rally || true
      sudo -i -u rally git config --global user.email "rally-ci@mirantis.com"
      sudo -i -u rally git config --global user.name "Mirantis Rally CI"
      echo 'rally ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/rally-42
      mkdir -p /home/rally/.ssh
      cat /root/.ssh/authorized_keys >> /home/rally/.ssh/authorized_keys
      wait

- script:
    name: clone_projects
    interpreter: /bin/bash -xe -s
    user: rally
    data: |
      env
      sudo mkdir -p /var/repos /opt/stack
      sudo chown rally /var/repos /opt/stack
      cd /var/repos
      projects="\
      openstack/cinder \
      openstack/glance \
      openstack/nova \
      openstack/rally \
      openstack/heat \
      openstack/heat-cfntools \
      openstack/heat-templates \
      openstack/keystone \
      openstack/sahara \
      openstack/neutron \
      openstack/requirements \
      openstack-dev/ci-sandbox \
      openstack-dev/devstack"
      for proj in $projects; do
        org=$(echo $proj | cut -d '/' -f 1)
        p=$(echo $proj | cut -d '/' -f 2)
        mkdir -p $org
        cd $org
        git clone "http://git.openstack.org/$proj.git"
        ln -s /var/repos/$proj /opt/stack/$p
        cd ..
      done
      ln -s /var/repos/openstack/rally /home/rally/rally
      wait

- script:
    name: install_deps
    interpreter: /bin/bash -xe -s
    data: |
      apt-get --force-yes -y install bridge-utils conntrack dnsmasq-base dnsmasq-utils dstat ebtables fontconfig fontconfig-config fonts-dejavu-core fonts-liberation fping genisoimage gettext graphviz iputils-arping javascript-common kpartx libaio1 libasprintf-dev libblas3 libcairo2 libcdt5 libcgraph6 libcroco3 libdatrie1 libdevmapper-event1.02.1 libfontconfig1 libgd3 libgettextpo-dev libgettextpo0 libgfortran3 libgraphite2-3 libgvc6 libgvpr2 libharfbuzz0b libice6 libjbig0 libjpeg-turbo8 libjpeg8 libjs-jquery libjs-jquery-metadata libjs-jquery-tablesorter liblapack3 libltdl7 libmnl0 libnetfilter-conntrack3 libnspr4 libnss3 libnss3-nssdb libpango-1.0-0 libpangocairo-1.0-0 libpangoft2-1.0-0 libpathplan4 libpixman-1-0 librados2 librbd1 libsgutils2-2 libsm6 libsysfs2 libthai-data libthai0 libtiff5 libunistring0 libvpx1 libx86-1 libxaw7 libxcb-render0 libxcb-shm0 libxmu6 libxpm4 libxrender1 libxt6 libyaml-0-2 libyaml-dev lvm2 open-iscsi pm-utils python-libxml2 python-lxml python-m2crypto python-mysql.connector python-mysqldb python-numpy qemu-utils sg3-utils sharutils socat sqlite3 sysfsutils unzip vbetool vlan watershed libguestfs0
      #
      egrep -v 'marconiclient|pyngus' /var/repos/openstack/requirements/global-requirements.txt > /tmp/gr.txt
      rm -fr /root/.cache/pip
      python2 -m pip install -r /tmp/gr.txt
      wait

- script:
    name: git_checkout
    user: rally
    interpreter: /bin/bash -xe -s
    data: |
      env
      PROJECT=${GERRIT_PROJECT:-$GERRIT_REFUPD_PROJECT}
      cd "/var/repos/$PROJECT"
      git checkout master && git pull
      if [ -n "$GERRIT_REF" ]; then
          git fetch https://review.openstack.org/$PROJECT $GERRIT_REF
          git checkout FETCH_HEAD && git rebase master
      else
          git checkout $GERRIT_REFUPD_NEW
      fi
      git status
      git diff --name-only master

- script:
    name: rally_docker_build_and_check
    user: rally
    interpreter: /bin/bash -xe -s
    data: |
      cd /var/repos
      cd $GERRIT_PROJECT
      docker build -t rallyforge/rally .
      mkdir /tmp/rv
      sudo chown 65500 /tmp/rv
      docker run -v /tmp/rv:/home/rally rallyforge/rally rally-manage db recreate
      docker run -v /tmp/rv:/home/rally rallyforge/rally rally deployment list

- script:
    name: rally_docker_push
    user: rally
    interpreter: /bin/bash -xe -s
    data: |
      cd rally
      git checkout master && git pull
      docker build -t rallyforge/rally .
      mkdir /tmp/rv
      sudo chown 65500 /tmp/rv
      docker run -v /tmp/rv:/home/rally rallyforge/rally rally-manage db recreate
      docker run -v /tmp/rv:/home/rally rallyforge/rally rally deployment list
      echo "TODO: push rally image"

- script:
    name: install_docker
    interpreter: /bin/bash -xe -s
    data: |
      apt-get --force-yes -y install docker.io
      usermod -a -G docker rally || true

- script:
    name: update_devstack
    interpreter: /bin/bash -xe -s
    user: rally
    data: |
      cd /opt/stack
      ls -lh
      ls -lh /var/repos
      ls -lh /var/repos/openstack
      for d in $(ls); do
        cd $d
        git pull || true
        cd ..
      done
      egrep -v 'marconiclient|pyngus' /var/repos/openstack/requirements/global-requirements.txt > /tmp/gr.txt
      sudo rm -fr /root/.cache/pip
      sudo -H python2 -m pip install -r /tmp/gr.txt

- script:
    name: init_rally_postgres
    interpreter: /bin/bash -xe -s
    data: |
      unset LANG
      unset ${!LC_*}
      env
      apt-get --force-yes -y update
      apt-get --force-yes -y install postgresql
      sudo -i -u postgres createuser -s -d -r -l rally
      sudo -i -u postgres createdb --owner=rally rally
      sed -i 's|#connection *=.*|connection=postgresql:///rally?host=/var/run/postgresql|' /etc/rally/rally.conf
      sudo -u rally rally-manage db recreate

- script:
    name: install_rally
    interpreter: /bin/bash -xe -s
    data: |
      cd /var/repos/openstack/rally
      RCI_PYTHON=${RCI_PYTHON:-python}
      sudo rm -fr /root/.cache/pip
      $RCI_PYTHON -m pip install -r requirements.txt -r test-requirements.txt -r optional-requirements.txt
      $RCI_PYTHON setup.py build
      $RCI_PYTHON setup.py install
      mkdir /etc/rally
      cp etc/rally/rally.conf.sample /etc/rally/rally.conf
      sudo -u rally rally-manage db recreate

- script:
    name: rally_gate
    user: rally
    interpreter: /bin/bash -xe -s
    data: |
      ${RCI_PYTHON:-python} -m pip freeze
      cd rally
      rally deployment list
      env
      ./tests/ci/rally-gate.py

- script:
    name: create_and_wait_deployment
    user: rally
    interpreter: /bin/bash -xe -s
    data: |
      rally-manage db recreate
      cat <<EOF > /tmp/conf.json
      {   
          "type": "ExistingCloud",
          "auth_url": "$OS_AUTH_URL",
          "admin": {
              "username": "$OS_USERNAME",
              "password": "$OS_PASSWORD",
              "tenant_name": "$OS_TENANT_NAME"
          }
      }
      EOF
      rally deployment create --name RCI --file /tmp/conf.json
      rally deployment config
      n=0
      until [ $n -ge 60 ]
      do  
          n=$[$n+1]
          sleep 10
          rally deployment check 2> /dev/null && exit 0
      done
      echo "Timeout waiting for cloud"
      exit 255

- script:
    name: eth1_up
    interpreter: /bin/bash -xe -s
    data: |
      ip link set eth1 up
      ip link list
      ip address flush dev eth1
      RCI_IP=${RCI_IP:-10.20.0.2/24}
      ip address add "$RCI_IP" dev eth1
      up_net () {
        local MOS_PUBLIC_VLAN=$1
        local MOS_PUBLIC_IP=$2
        if [ -n "$MOS_PUBLIC_VLAN" ]; then
          ip link add link eth1 name "vlan$MOS_PUBLIC_VLAN" type vlan id "$MOS_PUBLIC_VLAN"
          ip addr add "$MOS_PUBLIC_IP" dev "vlan$MOS_PUBLIC_VLAN"
          ip link set "vlan$MOS_PUBLIC_VLAN" up
        fi
      }
      up_net $MOS_PUBLIC_VLAN $MOS_PUBLIC_IP
      up_net $MOS_MANAGEMENT_VLAN $MOS_MANAGEMENT_IP
      up_net $MOS_PRIVATE_VLAN $MOS_PRIVATE_IP

- script:
    name: stack_sh
    user: rally
    interpreter: /bin/bash -xe -s
    data: |
      cd /var/repos/openstack-dev/devstack
      git pull
      cat > local.conf <<EOF
      [[local|localrc]]
      ADMIN_PASSWORD=admin
      DATABASE_PASSWORD=admin
      RABBIT_PASSWORD=admin
      SERVICE_PASSWORD=admin
      SERVICE_TOKEN=a862f596-76f3-21e3-b3b2-e716f9080d51
      disable_service tempest
      disable_service horizon
      LOGDIR=/opt/stack/logs
      LOG_COLOR=False
      EOF
      env
      ls -lh /opt/stack
      ./stack.sh

- script:
    name: rally_functional
    user: rally
    interpreter: /bin/bash -xe -s
    data: |
      ${RCI_PYTHON:-python} -m pip freeze
      export RCI_KEEP_DB=1
      source /var/repos/openstack-dev/devstack/openrc admin admin
      rally deployment create --name DEVSTACK --fromenv
      cd rally
      $RCI_PYTHON -m unittest discover tests/functional

- script:
    name: gzip_ds_logs
    interpreter: /bin/bash -x -s
    data: |
      cd /opt/stack/logs
      find -type l -delete
      gzip -9 *

- script:
    name: copy_mos_logs
    interpreter: /bin/bash -x -s
    data: |
      mkdir /tmp/mos-logs/
      for ip in 10.20.0.3 10.20.0.4 10.20.0.5; do
          mkdir /tmp/mos-logs/$ip
          sshpass -p r00tme scp -o 'StrictHostKeyChecking no' root@$ip:/var/log/*-all.log /tmp/mos-logs/$ip
          gzip -9 /tmp/mos-logs/$ip/*
      done
      chmod -R a+r /tmp/mos-logs

- script:
    name: unittests
    user: rally
    interpreter: /bin/bash -xe -s
    data: |
      ${RCI_PYTHON:-python} -m pip freeze
      cd /var/repos/$GERRIT_PROJECT
      $RCI_PYTHON -m unittest discover $RCI_UNITTESTS_DIR

- script:
    name: show_git_log
    user: rally
    interpreter: /bin/bash -x -s
    data: |
      cd /var/repos/${GERRIT_PROJECT:-$GERRIT_REFUPD_PROJECT}
      git log
      env

- job:
    name: fuel-community-6.0
    env:
      RALLY_SCENARIO: "fuel"
      RCI_IP: "10.20.0.3/24"
      OS_AUTH_URL: "http://10.20.0.2:5000/v2.0/"
      OS_USERNAME: admin
      OS_PASSWORD: admin
      OS_TENANT_NAME: admin
    runner:
      name: main
      vms:
        - name: u1404_rally_fuel
          scripts:
            - git_checkout
            - install_rally
            - eth1_up
            - create_and_wait_deployment
            - rally_gate
          scp:
            - ["/home/rally/rally/rally-plot", "rally-plot"]
        - name: fuel_community_60

- job:
    name: mos-6.1
    env:
      MOS_PUBLIC_VLAN: 100
      MOS_MANAGEMENT_VLAN: 102
      MOS_PRIVATE_VLAN: 103
      MOS_PUBLIC_IP: 172.16.0.1/24
      MOS_MANAGEMENT_IP: 192.168.0.1/24
      MOS_PRIVATE_IP: 192.168.2.1/24
      RALLY_SCENARIO: "rally-mos"
      RALLY_MANIFEST: "rally-jobs/manifest-mos.yaml"
      OS_AUTH_URL: "http://172.16.0.2:5000/v2.0/"
      OS_USERNAME: admin
      OS_PASSWORD: admin
      OS_TENANT_NAME: admin
    runner:
      name: main
      vms:
        - name: mos_6_1_1
        - name: mos_6_1_2
        - name: mos_6_1_3
        - name: u1404_rally_mos
          scp:
            - ["/tmp/mos-logs", "mos-logs"]
            - ["/home/rally/rally/rally-plot", "rally-plot"]
          scripts:
            - git_checkout
            - install_rally
            - eth1_up
            - create_and_wait_deployment
            - rally_gate
            - copy_mos_logs

- job:
    name: rally-dsvm-pg-py27-cli
    env:
      RCI_PYTHON: /usr/bin/python2.7
    runner:
      name: main
      vms:
        - name: u1404_dsvm
          scp:
            - ["/opt/stack/logs", "devstack-logs"]
            - ["/home/rally/rally/rally-cli-output-files", "cli-output-files"]
          scripts:
            - git_checkout
            - update_devstack
            - stack_sh
            - install_rally
            - init_rally_postgres
            - rally_functional
            - gzip_ds_logs

- job:
    name: rally-dsvm-pg-py34-cli
    env:
      RCI_PYTHON: /usr/bin/python3
    runner:
      name: main
      vms:
        - name: u1404_dsvm
          scp:
            - ["/opt/stack/logs", "devstack-logs"]
            - ["/home/rally/rally/rally-cli-output-files", "cli-output-files"]
          scripts:
            - git_checkout
            - update_devstack
            - stack_sh
            - install_rally
            - init_rally_postgres
            - rally_functional
            - gzip_ds_logs

- job:
    name: docker-check
    runner:
      name: main
      vms:
        - name: u1404_docker
          scripts:
            - git_checkout
            - install_docker
            - rally_docker_build_and_check

- job:
    name: docker-push
    runner:
      name: main
      vms:
        - name: u1404_docker
          scripts:
            - git_checkout
            - install_docker
            - rally_docker_push

- job:
    name: rally-pg-py27-unit
    env:
      RCI_PYTHON: python2.7
      RCI_UNITTESTS_DIR: tests/unit
      RALLY_UNITTEST_DB_URL: "postgresql:///rally?host=/var/run/postgresql"
    runner:
      name: main
      vms:
        - name: u1404_dsvm
          scripts:
            - git_checkout
            - install_rally
            - init_rally_postgres
            - unittests

- job:
    name: test
    env:
      RCI_OK: ok
    runner:
      name: main
      vms:
        - name: u1404_dsvm
          scp:
            - ["/home/rally", "test-logs"]
          scripts:
            - git_checkout
            - show_git_log

- project:
    name: openstack-dev/ci-sandbox
    jobs:
      - test
    on-ref-updated:
      - test

- project:
    name: openstack/rally
    on-ref-updated:
      - docker-push
    non-voting-jobs:
      - mos-6.1
#    jobs:
        #      - rally-dsvm-pg-py27-cli
        #      - docker-check
        #      - rally-pg-py27-unit
        #      - fuel-community-6.0
        #      - rally-dsvm-pg-py34-cli
