---

stream:
  module: rallyci.streams.gerrit
  ssh:
    username: ci50
    hostname: review.openstack.org
    port: 29418


publishers:
  - module: rallyci.publishers.fancynginx
    dir: /var/www/rally-ci/logs/
    header-filename: .head.html
    header-template: templates/ps.html
    job-template: templates/job.html
    summary-template: templates/summary.html

  - module: rallyci.publishers.gerrit
    fake: false
    vote: true
    template: |

        Build ${"succeeded" if success else "failed"}

        % for job in jobs:
        - ${job.name} http://185.8.56.88/logs/${run_id}/${job.name}/ : ${"FAILURE" if job.error else "SUCCESS"} in ${job.human_time}${" (non voting)" if not job.config.get("voting", True) else ""}
        % endfor

    ssh:
      username: ci50
      hostname: review.openstack.org
      port: 29418

global:
  recheck-regexp: ^recheck( rally| bug \d+| no bug)?$


runners:

  - name: lxc_ci49
    module: rallyci.runners.lxc
    networking:
      - bridge: br1
    ssh:
      host: ci49
      user: root
      port: 16622

  - name: lxc_ci50
    module: rallyci.runners.lxc
    ssh:
      host: ci50
      user: root
      port: 16622

  - name: docker_push_virsh_50
    module: rallyci.runners.virsh
    host: ["root", "ci50", 16622]
    memory: 2097152
    networks: ["br0"]
    volumes:
      - driver: zfs
        source: "tank/u1404@rally_docker"

  - name: virsh_dsvm_rally
    module: rallyci.runners.virsh
    host: ["root", "ci50", 16622]
    memory: 4297152
    networks: ["br0"]
    volumes:
      - driver: zfs
        source: "tank/u1404_dsvm@1"


environments:
  - name: event_env
    module: rallyci.environments.event
    export-event:
      GERRIT_PROJECT: change.project
      GERRIT_REF: patchSet.ref

  - name: mos511_full
    max_threads: 2
    module: rallyci.environments.virsh
    export:
      RCI_VLAN: 11
      RCI_ADDR: 10.21.0.1/16
      RCI_ENDPOINT: "http://10.21.1.2:35357/v2.0/"
      OS_AUTH_URL: "http://10.21.1.2:5000/v2.0/"
      OS_USERNAME: admin
      OS_PASSWORD: admin
      OS_TENANT_NAME: admin
    create-vms:

      - memory: 2097152
        networks: ["osall% 52:54:00:e4:05:00"]
        host: ["root", "ci50", 16622]
        volumes:
          - driver: zfs
            source: "tank/mos511-1@1"

      - memory: 4096000
        networks: ["osall% 52:54:00:e4:05:01"]
        host: ["root", "ci50", 16622]
        volumes:
          - driver: zfs
            source: "tank/mos511-2@1"

      - memory: 4096000
        networks: ["osall% 52:54:00:e4:05:02"]
        host: ["root", "ci50", 16622]
        volumes:
          - driver: zfs
            source: "tank/mos511-3@1"


  - name: mos6_full
    max_threads: 4
    module: rallyci.environments.virsh
    export:
      RCI_VLAN: 100
      RCI_ADDR: 172.16.0.1/16
      RCI_ENDPOINT: "http://172.16.0.2:35357/v2.0/"
      OS_AUTH_URL: "http://172.16.0.2:5000/v2.0/"
      OS_USERNAME: admin
      OS_PASSWORD: admin
      OS_TENANT_NAME: admin
    create-vms:

      - memory: 2097152
        networks: ["osall% 52:54:00:e4:05:00"]
        host: ["root", "ci49", 16622]
        volumes:
          - driver: zfs
            source: "tank/mos6-full-1@1"

      - memory: 4192000
        networks: ["osall% 52:54:00:e4:05:02"]
        host: ["root", "ci49", 16622]
        volumes:
          - driver: zfs
            source: "tank/mos6-full-2@1"

      - memory: 4192000
        networks: ["osall% 52:54:00:e4:05:03"]
        host: ["root", "ci49", 16622]
        volumes:
          - driver: zfs
            source: "tank/mos6-full-3@1"

scripts:

  - name: git_checkout
    interpreter: /bin/bash -xe -s
    data: |
        env
        cd ~/rally/
        git checkout master
        sleep 16
        git pull
        git fetch https://review.openstack.org/$GERRIT_PROJECT $GERRIT_REF
        git checkout FETCH_HEAD
        git config --global user.email "rally-ci@mirantis.com"
        git config --global user.name "Mirantis Rally CI"
        git rebase master || true
        git clean -fxd -e .tox -e rally.egg-info
        git diff --name-only master

  - name: git_checkout_lxc
    interpreter: /usr/bin/sudo -E -u rally /bin/bash -xe -s
    data: |
        export HOME=/home/rally
        env
        cd /home/rally/rally
        git checkout master
        sleep 16
        git pull
        git fetch https://review.openstack.org/$GERRIT_PROJECT $GERRIT_REF 
        git checkout FETCH_HEAD
        git config --global user.email "rally-ci@mirantis.com"
        git config --global user.name "Mirantis Rally CI"
        git rebase master || true
        git clean -fxd -e .tox -e rally.egg-info
        git diff --name-only master

  - name: rebuild_if_requirements
    interpreter: /usr/bin/sudo -E -u rally /bin/bash -x -s
    data: |
        export HOME=/home/rally
        cd /home/rally/rally
 
        UPD=`git diff --name-only master | grep -c "requirements.txt"`
        if [[ $UPD -ne "0" ]]; then
           tox -r -e$RCI_TOX_ENV
        fi

  - name: vlan
    interpreter: /bin/bash -xe -s
    data: |
        ip link set eth1 up
        ip link list
        ip address flush dev eth1
        ip address add 10.20.0.2/24 dev eth1
        ip link add link eth1 name vlan$RCI_VLAN type vlan id $RCI_VLAN
        ip addr add $RCI_ADDR dev vlan$RCI_VLAN
        ip link set vlan$RCI_VLAN up

  - name: wait_for_net
    interpreter: /bin/bash -x -s
    data: |
        n=0
        until [ $n -ge 12 ]
        do
            n=$[$n+1]
            sleep 5
            ping git.openstack.org -c 1 > /dev/null 2>&1 && exit 0
        done
        echo "Timeout waiting for net"
        exit 255


  - name: create_and_wait_deployment
    interpreter: /usr/bin/sudo -E -u rally /bin/bash -xe -s
    data: |
        export HOME=/home/rally
        export PATH=$PATH:$HOME/rally/.tox/py27/bin/
        rally-manage db recreate

        cat <<EOF > /tmp/conf.json
        {
            "type": "ExistingCloud",
            "auth_url": "$OS_AUTH_URL",
            "endpoint_type": "public",
            "endpoint": "$RCI_ENDPOINT",
            "admin": {
                "username": "$OS_USERNAME",
                "password": "$OS_PASSWORD",
                "tenant_name": "$OS_TENANT_NAME"
            }
        }
        EOF
        rally deployment create --name MOS --file /tmp/conf.json
        rally deployment config

        n=0
        until [ $n -ge 120 ]
        do
            n=$[$n+1]
            sleep 10
            rally deployment check 2> /dev/null && exit 0
        done
        echo "Timeout waiting for cloud"
        exit 255

  - name: install_postgres
    interpreter: /bin/bash -x -s
    data: |
        sleep 15
        env
        ip r
        apt-get -y install postgresql python-psycopg2 libpq-dev
        sudo -i -u rally /home/rally/rally/.tox/py27/bin/pip install psycopg2
        sudo -i -u postgres createuser -s -d -r -l rally
        sudo -i -u postgres createdb --owner=rally rally

  - name: stack.sh
    interpreter: /usr/bin/sudo -E -u rally /bin/bash -xe -s
    data: |
        export HOME=/home/rally
        cd ~/devstack
        ./stack.sh

  - name: test_py27
    interpreter: /usr/bin/sudo -E -u rally /bin/bash -xe -s
    data: |
        export HOME=/home/rally
        export RCI_KEEP_DB=1
        source ~/devstack/openrc admin admin
        cd ~/rally
        .tox/py27/bin/rally deployment create --name DS --fromenv
        .tox/py27/bin/rally deployment config > /tmp/.rd.json
        cat /tmp/.rd.json
        #.tox/py27/bin/python -m unittest discover tests/functional
        tox -e py27 tests.functional -- --concurrency=1
        cat /tmp/.rd.json

  - name: test_py34
    interpreter: /usr/bin/sudo -E -u rally /bin/bash -xe -s
    data: |
        export HOME=/home/rally
        export RCI_KEEP_DB=1
        source ~/devstack/openrc admin admin
        cd ~/rally
        .tox/py34/bin/rally deployment create --name DS --fromenv
        .tox/py34/bin/rally deployment config > /tmp/.rd.json
        cat /tmp/.rd.json
        #.tox/py34/bin/python -m unittest discover tests/functional
        tox -e py34 tests.functional -- --concurrency=1
        cat /tmp/.rd.json

  - name: nat
    interpreter: /bin/bash -xe -s
    data: |
        cat >> /etc/sysctl.conf <<EOF
        net.ipv4.conf.default.rp_filter=1
        net.ipv4.conf.all.rp_filter=1
        EOF
        sysctl -p /etc/sysctl.conf
        cat > /etc/rc.local <<EOF
        #!/bin/sh -e
        #
        /sbin/iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE
        EOF
        apt-get -y install iptables
        sh /etc/rc.local

  - name: install_rally
    interpreter: /bin/bash -x -s
    data: |
        env
        ip r
        echo 'Acquire::http::Proxy "http://10.1.1.1:3128";' > /etc/apt/apt.conf.d/80proxy
        sleep 10
        ip r

        export http_proxy http://10.1.1.1:3128/
        apt-get update && apt-get -y install git python-pip
        apt-get -y install python-dev libffi-dev libxml2-dev libxslt1-dev libssl-dev
        apt-get -y install python-subunit libpq-dev python3-dev curl
        pip install tox
        pip install six
        pip install mako
        unset http_proxy
        
        useradd -m rally
        su rally
        cd /home/rally
        git clone git://git.openstack.org/stackforge/rally.git
        cd rally
        tox -epy27 & tox -epep8 & tox -epy26 & tox -e py34
        .tox/pep8/bin/pip install flake8-double-quotes\>\=0.0.1

  - name: install_rally_26
    interpreter: /bin/bash -x -s
    data: |
        env
        ip r
        echo 'Acquire::http::Proxy "http://10.1.1.1:3128";' > /etc/apt/apt.conf.d/80proxy
        sleep 15
        ip r

        export http_proxy http://10.1.1.1:3128/
        apt-get update && apt-get -y install git python-pip
        apt-get -y install software-properties-common python-software-properties
        yes | add-apt-repository ppa:fkrull/deadsnakes
        apt-get update
        apt-get -y install python2.6-dev libffi-dev libxml2-dev libxslt1-dev libssl-dev python-subunit python2.6
        pip install tox==1.6
        pip install -U setuptools\<8.0
        unset http_proxy
        
        useradd -m rally
        su rally
        cd /home/rally
        git clone git://git.openstack.org/stackforge/rally.git
        cd rally
        tox -epy26 || true

  - name: tox
    interpreter: /usr/bin/sudo -E -u rally /bin/bash -xe -s
    data: |
      env
      export HOME="/home/rally"
      export RCI_TESTS=${RCI_TESTS:-"tests.unit"}
      export RCI_TOX_ENV=${RCI_TOX_ENV:-"py27"}
      export PATH=$PATH:$HOME/rally/.tox/$RCI_TOX_ENV/bin/
      env
      cd $HOME/rally
      tox -e$RCI_TOX_ENV $RCI_TESTS $RCI_EXTRA

  - name: rally_functional
    interpreter: /usr/bin/sudo -E -u rally /bin/bash -xe -s
    data: |
      export HOME=/home/rally
      export PATH=$PATH:$HOME/rally/.tox/py27/bin/
      cd /home/rally/rally
      env
      .tox/py27/bin/rally deployment check
      .tox/py27/bin/python -m subunit.run discover tests/functional > /tmp/tests.subunit
      .tox/py27/bin/subunit2pyunit < /tmp/tests.subunit

  - name: rally_full
    interpreter: /usr/bin/sudo -E -u rally /bin/bash -xe -s
    data: |
      export RALLY_SCENARIO=rally-mos.yaml
      export HOME=/home/rally
      export PATH=$PATH:$HOME/rally/.tox/py27/bin/
      cd /home/rally/rally
      env
      ./tests/ci/rally-gate.py
      env
      ls
      ls rally-plot

  - name: rally_docker
    interpreter: /bin/bash -ex -s
    data: |
      cd ~/rally
      docker build -t test_image .
      docker run test_image rally deployment list

  - name: rally_docker_push
    interpreter: /bin/bash -ex -s
    data: |
      cd ~/rally
      docker build -t rallyforge/rally .
      sudo /usr/local/bin/push_rally

      git checkout master
      export RCI_ADD_TAG="1"
      curl https://index.docker.io/v1/repositories/rallyforge/rally/tags 2> /dev/null > /tmp/.rally-tags
      for tag in `git tag -l`; do
       echo $tag
       if ! grep -c $tag /tmp/.rally-tags; then
        git checkout tags/$tag
        docker build -t rallyforge/rally:$tag .
        sudo /usr/local/bin/push_rally
       fi
      done
      unset RCI_ADD_TAG
      git checkout master


projects:
  - name: stackforge/rally
    job-common-attrs:
      env:
        RCI_TOX_ENV: py27
      environments: ["event_env"]
      build-scripts: ["wait_for_net", "git_checkout_lxc", "rebuild_if_requirements"]

    jobs:

      - name: pep8
        build-scripts: ["git_checkout_lxc"]
        env:
          RCI_TOX_ENV: pep8
          RCI_TESTS: "."
        voting: true
        runner: lxc_ci50
        runner-args:
          name: rally
          template: ubuntu
          build_scripts: ["install_rally", "nat"]
        test-scripts: ["tox"]

      - name: tox-py27-postgres
        env:
          RCI_TOX_ENV: py27
          RCI_EXTRA: "--\\ --concurrency=1"
        voting: true
        test-scripts: ["tox"]
        runner: lxc_ci50
        runner-args:
          name: rally-postgres
          template: ubuntu
          build_scripts: ["install_rally", "install_postgres"]

      - name: tox-ecli-py27-postgres
        voting: true
        build-scripts: ["wait_for_net", "git_checkout", "rebuild_if_requirements", "stack.sh"]
        test-scripts: ["test_py27"]
        runner: virsh_dsvm_rally
        runner-args:
          user: rally

      - name: docker-push
        build-scripts: ["wait_for_net", "git_checkout"]
        events: ["change-merged"]
        runner: docker_push_virsh_50
        runner-args:
          user: rally
        scripts: ["rally_docker_push"]

      - name: mos-5.1.1
        build-scripts:
          - wait_for_net
          - git_checkout_lxc
          - rebuild_if_requirements
          - vlan
          - create_and_wait_deployment
        voting: false
        runner: lxc_ci50
        runner-args:
          name: rally
          template: ubuntu
          env_networks: ["osall:10.21.1.1/16"]
          build_scripts: ["install_rally", "nat"]
          pub_dir: /home/rally/rally/rally-plot/
        environments: ["event_env", "mos511_full"]
        test-scripts: ["rally_full"]

      - name: mos-6.0
        voting: false
        runner: lxc_ci49
        runner-args:
          name: rally
          template: ubuntu
          env_networks: ["osall:172.16.0.1/24"]
          build_scripts: ["install_rally", "nat"]
          pub_dir: /home/rally/rally/rally-plot/
        environments: ["event_env", "mos6_full"]
        build-scripts:
          - wait_for_net
          - git_checkout_lxc
          - rebuild_if_requirements
          - vlan
          - create_and_wait_deployment
        test-scripts: ["rally_full"]
