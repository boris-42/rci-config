---
stream:
  module: rallyci.streams.gerrit
  username: ci50
  hostname: review.openstack.org
  port: 29418

publisher:
  module: rallyci.publishers.gerrit
  vote: true
  ssh:
    username: ci50
    hostname: review.openstack.org
    port: 29418
  header: |
    Build {succeeded} by Mirantis Rally CI
  job-template: "- {j.name} http://185.8.56.87/{j.log_path}/ : {j.success} in {human_time}{voting}"

recheck:
  regexp: ^(rally.?ci )?recheck.*$

loggers:
  file:
    module: rallyci.loggers.logfile
    path: /home/rally/jobs-logs/

environments:
  event:
    module: rallyci.environments.event
    export-event:
      GERRIT_PROJECT: change.project
      GERRIT_REF: patchSet.ref
  dummy:
    module: rallyci.environments.dummy

nodepools:
  ci4950:
    module: rallyci.nodepools.fair
    tasks_per_node: 1
    nodes:
      - hostname: 10.1.1.1
        username: root
        port: 16622
      - hostname: 10.1.1.2
        username: root
        port: 16622

runners:
  virsh:
    module: rallyci.runners.virsh
    nodepool: ci4950
    vms:
      dsvm-rally:
        memory: 4096
        build-scripts: ["init_ubuntu", "devstack_checkout"]
        dataset: tank/qcow
        source: bare_u1404@2
        net:
          - bridge: "br5"
          - dynamic-bridge: "fuel_br"
      fuel-community-6.0:
        memory: 4096
        dataset: tank/qcow
        source: fuel-community-6.0@1
        no_ip: true
        net:
          - dynamic-bridge: "fuel_br"
            mac: "52:54:00:c2:56:67"

scripts:

  git_checkout:
    user: rally
    interpreter: /bin/bash -xe -s
    data: |
      env
      cd $GERRIT_PROJECT && git checkout master && git pull
      git fetch https://review.openstack.org/$GERRIT_PROJECT $GERRIT_REF
      git checkout FETCH_HEAD && git rebase master || true
      git diff --name-only master

  devstack_checkout:
    interpreter: /bin/bash -xe -s
    data: |
      mkdir -p /opt/stack
      repos="\
      git://git.openstack.org/openstack/cinder.git \
      git://git.openstack.org/openstack/glance.git \
      git://git.openstack.org/openstack/heat.git \
      git://git.openstack.org/openstack/heat-cfntools.git \
      git://git.openstack.org/openstack/heat-templates.git \
      git://git.openstack.org/openstack/horizon.git \
      git://git.openstack.org/openstack/keystone.git \
      git://git.openstack.org/openstack/nova.git \
      https://github.com/kanaka/noVNC.git \
      git://git.openstack.org/openstack/requirements.git
      git://git.openstack.org/openstack/neutron.git"
      cd /opt/stack
      for repo in $repos
      do  
          (
          if git clone $repo 2> /dev/null
          then
             echo "repo cloned"
          else
             cd `echo $repo | sed -n  's/.*\/\([a-z\-]*\)\.git$/\1/pi'`
             git checkout master ; git pull ; cd ..
          fi
          )&
      done
      wait

  init_ubuntu:
    interpreter: /bin/bash -xe -s
    data: |
      apt-get update && apt-get --force-yes -y upgrade
      apt-get --force-yes -y install git python2.7 bash-completion build-essential python-dev libffi-dev libxml2-dev libxslt1-dev libssl-dev libpq-dev libmysqlclient-dev libssl-dev sudo wget libkrb5-dev libsqlite3-dev libldap2-dev libsasl2-dev libvirt-dev
      #
      apt-get --force-yes -y install python3-dev
      #
      apt-get --force-yes -y install bridge-utils conntrack dnsmasq-base dnsmasq-utils dstat ebtables fontconfig fontconfig-config fonts-dejavu-core fonts-liberation fping genisoimage gettext graphviz iputils-arping javascript-common kpartx libaio1 libasprintf-dev libblas3 libcairo2 libcdt5 libcgraph6 libcroco3 libdatrie1 libdevmapper-event1.02.1 libfontconfig1 libgd3 libgettextpo-dev libgettextpo0 libgfortran3 libgraphite2-3 libgvc6 libgvpr2 libharfbuzz0b libice6 libjbig0 libjpeg-turbo8 libjpeg8 libjs-jquery libjs-jquery-metadata libjs-jquery-tablesorter liblapack3 libltdl7 libmnl0 libnetfilter-conntrack3 libnspr4 libnss3 libnss3-nssdb libpango-1.0-0 libpangocairo-1.0-0 libpangoft2-1.0-0 libpathplan4 libpixman-1-0 librados2 librbd1 libsgutils2-2 libsm6 libsysfs2 libthai-data libthai0 libtiff5 libunistring0 libvpx1 libx86-1 libxaw7 libxcb-render0 libxcb-shm0 libxmu6 libxpm4 libxrender1 libxt6 libyaml-0-2 libyaml-dev lvm2 open-iscsi pm-utils python-libxml2 python-lxml python-m2crypto python-mysql.connector python-mysqldb python-numpy qemu-utils sg3-utils sharutils socat sqlite3 sysfsutils unzip vbetool vlan watershed libguestfs0 &
      #
      wget https://raw.github.com/pypa/pip/master/contrib/get-pip.py -O /tmp/gp.py
      python3 /tmp/gp.py #this should be done before pip for python2
      python /tmp/gp.py
      python3 -m pip install -r /home/rally/openstack/rally/requirements.txt -r /home/rally/openstack/rally/optional-requirements.txt &
      #
      wget -q -O - https://raw.githubusercontent.com/openstack/requirements/master/global-requirements.txt | egrep -v 'marconiclient|pyngus' > /tmp/gr.txt
      python2 -m pip install -r /tmp/gr.txt &
      #
      useradd -u 65510 -m rally || true
      sudo -i -u rally git config --global user.email "rally-ci@mirantis.com"
      sudo -i -u rally git config --global user.name "Mirantis Rally CI"
      echo 'rally ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/rally-42
      mkdir -p /home/rally/.ssh
      cat /root/.ssh/authorized_keys >> /home/rally/.ssh/authorized_keys
      sudo -u rally bash -ex -s <<EOF
      export HOME=/home/rally
      cd /home/rally/
      mkdir openstack && cd openstack
      git clone git://github.com/openstack/rally.git &
      cd /home/rally/
      git clone git://github.com/openstack-dev/devstack.git
      wait
      EOF
      wait
      #

  init_rally_postgres:
    interpreter: /bin/bash -xe -s
    data: |
      apt-get --force-yes -y install postgresql
      sudo -i -u postgres createuser -s -d -r -l rally
      sudo -i -u postgres createdb --owner=rally rally
      sed -i 's|#connection *=.*|connection=postgresql:///rally?host=/var/run/postgresql|' /etc/rally/rally.conf
      sudo -u rally rally-manage db recreate

  install_rally:
    interpreter: /bin/bash -xe -s
    data: |
      cd /home/rally/openstack/rally
      RCI_PYTHON=${RCI_PYTHON:-python}
      $RCI_PYTHON -m pip install -r requirements.txt
      $RCI_PYTHON -m pip install -r test-requirements.txt
      $RCI_PYTHON -m pip install -r optional-requirements.txt
      $RCI_PYTHON setup.py build
      $RCI_PYTHON setup.py install
      mkdir /etc/rally
      cp etc/rally/rally.conf.sample /etc/rally/rally.conf
      sudo -u rally rally-manage db recreate

  rally_gate:
    user: rally
    interpreter: /bin/bash -xe -s
    data: |
      ln -s /home/rally/openstack/rally /home/rally/rally #FIXME
      cd openstack/rally
      rally deployment list
      env
      ./tests/ci/rally-gate.py

  create_and_wait_deployment:
    user: rally
    interpreter: /bin/bash -xe -s
    data: |
      rally-manage db recreate
      cat <<EOF > /tmp/conf.json
      {   
          "type": "ExistingCloud",
          "auth_url": "$OS_AUTH_URL",
          "endpoint_type": "public",
          "endpoint": "$RCI_ENDPOINT",
          "admin": {
              "username": "$OS_USERNAME",
              "password": "$OS_PASSWORD",
              "tenant_name": "$OS_TENANT_NAME"
          }
      }
      EOF
      rally deployment create --name RCI --file /tmp/conf.json
      rally deployment config
      n=0
      until [ $n -ge 60 ]
      do  
          n=$[$n+1]
          sleep 10
          rally deployment check 2> /dev/null && exit 0
      done
      echo "Timeout waiting for cloud"
      exit 255

  mos_eth1:
    interpreter: /bin/bash -xe -s
    data: |
      ip link set eth1 up
      ip link list
      ip address flush dev eth1
      RCI_MOS_INT_IP=${RCI_MOS_INT_IP:-10.20.0.2/24}
      ip address add "$RCI_MOS_INT_IP" dev eth1
      if [ -n "$RCI_VLAN" ]; then
        ip link add link eth1 name "vlan$RCI_MOS_VLAN" type vlan id "$RCI_MOS_VLAN"
        ip addr add "$RCI_MOS_IP" dev "vlan$RCI_MOS_VLAN"
        ip link set "vlan$RCI_MOS_VLAN" up
      fi

  stack_sh:
    user: rally
    interpreter: /bin/bash -xe -s
    data: |
      cd devstack
      git pull
      cat > local.conf <<EOF
      [[local|localrc]]
      ADMIN_PASSWORD=admin
      DATABASE_PASSWORD=admin
      RABBIT_PASSWORD=admin
      SERVICE_PASSWORD=admin
      SERVICE_TOKEN=a862f596-76f3-21e3-b3b2-e716f9080d51
      disable_service tempest
      disable_service horizon
      LOGDIR=/opt/stack/logs
      LOG_COLOR=False
      EOF
      ./stack.sh

  rally_functional:
    user: rally
    interpreter: /bin/bash -xe -s
    data: |
      export RCI_KEEP_DB=1
      source ~/devstack/openrc admin admin
      rally deployment create --name DEVSTACK --fromenv
      cd openstack/rally
      $RCI_PYTHON -m unittest discover tests/functional

  gzip_ds_logs:
    interpreter: /bin/bash -x -s
    data: |
      cd /opt/stack/logs
      find -type l -delete
      gzip -9 *

  prepare_sandbox:
    user: rally
    interpreter: /bin/bash -xe -s
    data: |
      mkdir openstack-dev && cd openstack-dev
      git clone git://git.openstack.org/openstack-dev/ci-sandbox.git

  show_git_log:
    user: rally
    interpreter: /bin/bash -x -s
    data: |
      cd $GERRIT_PROJECT
      git log

jobs:
  fuel-community-6.0:
    envs:
      - name: event
      - name: dummy
        export:
          RALLY_SCENARIO: "fuel"
          RCI_MOS_INT_IP: "10.20.0.3/24"
          RCI_ENDPOINT: "http://10.20.0.2:35357/v2.0/"
          OS_AUTH_URL: "http://10.20.0.2:5000/v2.0/"
          OS_USERNAME: admin
          OS_PASSWORD: admin
          OS_TENANT_NAME: admin
    runner:
      name: virsh
      vms:
        - vm: dsvm-rally
          scp:
            - ["/home/rally/openstack/rally/rally-plot", "rally-plot"]
          scripts:
            - git_checkout
            - install_rally
            - mos_eth1
            - create_and_wait_deployment
            - rally_gate
        - vm: fuel-community-6.0

  rally-postgres-py27:
    envs:
      - name: event
      - name: dummy
        export:
          RCI_PYTHON: /usr/bin/python2.7
    runner:
      name: virsh
      vms:
        - vm: dsvm-rally
          scp:
            - ["/opt/stack/logs", "devstack-logs"]
          scripts:
            - git_checkout
            - install_rally
            - devstack_checkout
            - stack_sh
            - init_rally_postgres
            - rally_functional
            - gzip_ds_logs

  rally-postgres-py34:
    envs:
      - name: event
      - name: dummy
        export:
          RCI_PYTHON: /usr/bin/python3
    runner:
      name: virsh
      vms:
        - vm: dsvm-rally
          scp:
            - ["/opt/stack/logs", "devstack-logs"]
          scripts:
            - git_checkout
            - install_rally
            - devstack_checkout
            - stack_sh
            - init_rally_postgres
            - rally_functional
            - gzip_ds_logs

  test:
    envs:
      - name: event
      - name: dummy
        export:
          RCI_OK: ok
    runner:
      name: virsh
      vms:
        - vm: dsvm-rally
          scp:
            - ["/home/rally", "test-logs"]
          scripts:
            - prepare_sandbox
            - git_checkout
            - show_git_log

projects:
  "openstack/rally":
    silent: true
    non-voting-jobs:
      - fuel-community-6.0
    jobs:
      - rally-postgres-py27
      - rally-postgres-py34
  "openstack-dev/ci-sandbox":
    silent: true
    jobs:
      - test
